// Second Largest
// Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.

// Note: The second largest element should not be equal to the largest element.

  class Solution:
    def getSecondLargest(self, arr):
        first = second = -1
     
        for num in arr:
            if num > first:
                second = first
                first = num
            elif num > second and num != first:
                 second = num
       
        return second

   // Move All Zeroes to End

// You are given an array arr[] of non-negative integers. Your task is to move all the zeros in the array to the right end while maintaining the relative 
// order of the non-zero elements.The operation must be performed in place, meaning you should not use extra space for another array.       
  class Solution:
	def pushZerosToEnd(self, arr):
        i = 0
        for j in range(len(arr)):
            if arr[j] != 0:
                arr[i], arr[j] = arr[j], arr[i]
                i += 1

          
          // Equalize the Towers

          class Solution:
    def minCost(self, heights, cost):
        n = len(heights)
        pairs = sorted(zip(heights, cost))  # Sort by height
        
        total_cost = sum(cost)
        cumulative = 0
        target_height = 0
        
        for h, c in pairs:
            cumulative += c
            if cumulative >= (total_cost + 1) // 2:
                target_height = h
                break
        
        # Now compute the cost to make all towers = target_height
        min_total_cost = sum(abs(h - target_height) * c for h, c in pairs)
        return min_total_cost


       
