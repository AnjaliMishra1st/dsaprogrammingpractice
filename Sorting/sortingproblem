You'll use two different sorting algorithms: bubble sort and selection sort.
Bubble sort is selected if the array is nearly sorted. An array is considered nearly sorted if at most one pair of elements is out of order. 
The selection sort is chosen if the array is not nearly sorted. 
The first line of input contains an integer n, representing the number of students.
The second line contains n space-separated integers, representing the exam scores of students.
// You are using GCC
#include <iostream>
using namespace std;

void bubbleSort(int scores[], int n) {
    for(int i=0; i<n-1; i++){
        for(int j=0; j<n-i-1; j++){
            if(scores[j]>scores[j+1]){
                int temp = scores[j];
                scores[j] = scores[j+1];
                scores[j+1] = temp;
            }
        }
    }
}

void selectionSort(int scores[], int n) {
   for(int i=0; i<n-1; i++){
       int minIndex = i;
       for(int j=i+1; j<n; j++){
           if(scores[j]<scores[minIndex]){
               minIndex = j;
               
           }
       }int temp = scores[i];
       scores[i] = scores[minIndex];
       scores[minIndex] = temp;
       
       
   }
    
}

bool isNearlySorted(int scores[], int n) {
    int count = 0;
    for (int i = 0; i < n - 1; i++) {
        if (scores[i] > scores[i + 1]) {
            count++;
            if (count > 1) { 
                return false;
            }
        }
    }
    return true;
}

void sortArray(int scores[], int n) {
    if (isNearlySorted(scores, n)) {
        cout << "Using Bubble Sort" << endl;
        bubbleSort(scores, n);
    } else {
        cout << "Using Selection Sort" << endl;
        selectionSort(scores, n);
    }
}

void printArray(int scores[], int n) {
    for (int i = 0; i < n; i++) {
        cout << scores[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;

    int examScores[n];
    for (int i = 0; i < n; i++) {
        cin >> examScores[i];
    }

    sortArray(examScores, n);

    cout << "Sorted Exam Scores: ";
    printArray(examScores, n);

    return 0;
}
