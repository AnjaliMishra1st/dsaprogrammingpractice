You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, 
and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // Step 1: create a dummy node to build the result list easily
        ListNode* dummy = new ListNode(0);
        ListNode* current = dummy; // points to the current node in result list
        int carry = 0; // stores carry (0 or 1)

        // Step 2: loop while either l1, l2, or carry exists
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            // Get current values (if node exists)
            int v1 = (l1 != nullptr) ? l1->val : 0;
            int v2 = (l2 != nullptr) ? l2->val : 0;

            // Step 3: add both digits and carry
            int sum = v1 + v2 + carry;

            // Step 4: update carry for next addition
            carry = sum / 10;

            // Step 5: create a new node for the current digit
            current->next = new ListNode(sum % 10);

            // Move the current pointer
            current = current->next;

            // Move l1 and l2 forward if possible
            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }

        // Step 6: return the next of dummy (actual head)
        return dummy->next;
    }
};
