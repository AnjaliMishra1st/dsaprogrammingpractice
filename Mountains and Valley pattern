Problem Statement
Given an array of integers, determine if it exhibits a continuous mountain and valley pattern.
A continuous mountain and valley pattern means that the array elements strictly alternate between increasing and decreasing. That is:
Either a[0] < a[1] > a[2] < a[3] > a[4] ..., or
a[0] > a[1] < a[2] > a[3] < a[4] ....

Note: If the array has only one element, return 1.

Input Format
The first line contains an integer n, the number of elements in the array.
The second line contains n space-separated integers.
Output Format
Print 1 if the array follows the continuous mountain and valley pattern, otherwise print 0.
Sample Testcase 0
Testcase Input
5
1 2 3 2 1
Testcase Output
0
//---
#include <iostream>
#include <vector>
using namespace std;

bool isValidPattern(const vector<int>& arr, int n){
    if(n==1) return true;
    bool startWithLess = arr[0] < arr[1];
    for(int i=1; i<n-1; i++) {
        if(arr[i]==arr[i+1]) return false;
        if (arr[i] == arr[i+1]) return false;
        if(startWithLess) {
            if(i%2==1 && arr[i]<= arr[i+1]) return false;
            if(i%2==0 && arr[i]<= arr[i+1]) return false;

          }
    }
    return true;

}
int main(){
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i=0; i<n; i++) cin >> arr[i];
    cout<<(isValidPattern(arr, n) ? 1:0) << endl;
    return 0;




}

