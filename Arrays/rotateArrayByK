/  Brute force approach
//  #include <iostream>
// //  #include <vector>
// using namespace std;
// void rotateBruteForce(int arr[], int n, int k){
//     k=k%n;
//     for(int i=0; i<k; i++){
//         int last = arr[n-1];
//         for(int j=n-1; j>0; j--){
//             arr[j] = arr[j-1];

//         }
//         arr[0] = last;

//     }
// }
// // driver code

// int main(){
//     int arr[] = {1,2,3,4,5,6,7};
//     int n = 7, k = 3;
//     rotateBruteForce(arr, n, k);
//     for(int i=0; i<n; i++)
//     cout<<arr[i]<<" ";

// }

//   By optimal approach 

#include <iostream>
using namespace std;

void reverseArray(int arr[], int start, int end){
    while (start<end){
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;

        
    }
}

void rotateOptimal(int arr[], int n, int k){
    k = k%n;
    reverseArray(arr, 0, n-1);
    reverseArray(arr, 0, k-1);
    reverseArray(arr, k, n-1);

}

# driver code 
int main(){ 
    int arr[] = {1,2,3,4,5,6,7}
    int n=7, k=3;
    rotateOptimal(arr, n, k);
    for(int i=0; i<n; i++)
    cout<<arr[i]<<" ";
    
}
