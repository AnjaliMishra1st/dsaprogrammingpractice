//# 3. Iterator class (correct class name and logic)
class SLLIterator:
    def __init__(self, start):
        self.current = start

    def __iter__(self):
        return self

    def __next__(self):
        if not self.current:
            raise StopIteration
        data = self.current.item
        self.current = self.current.next
        return data

// # 4. Driver code
mylist = SLL()
mylist.insert_at_start(20)
mylist.insert_at_start(10)
mylist.insert_at_start(30)
mylist.insert_after(mylist.search(20), 25)

mylist.print_list()  # Output: 30 10 20 25
print()
mylist.delete_item(20)
mylist.print_list()  # Output: 30 10 25
print()
for x in mylist:
    print(x, end=' ')  # Output: 30 10 25
print()



# sll class
class SLL:
    def __init__(self):
        self.head = None

# display List
def display(self):
    current = self.head
    while current:
        print(current.data, end=" -> ")
        current = current.next
        print("None")

# Insert a noade at the end
def insert_at_end(self, data):
    new_node = Node(data)
    if not self.head:
        self.head = new_node
        return
    current = self.head
    while current.next:
        current = current.next
    current.next = new_node

sll = SinglyLinkedList()
sll.insert_at_end(10)
sll.insert_at_end(20)
sll.insert_at_end(30)
sll.display()

# Delete a Node by Value
    def delete_by_value(self, value):
        if not self.head:
            return

        if self.head.data == value:
            self.head = self.head.next
            return

        current = self.head
        while current.next and current.next.data != value:
            current = current.next

        if current.next:
            current.next = current.next.next

sll.delete_by_value(20)
sll.display()
