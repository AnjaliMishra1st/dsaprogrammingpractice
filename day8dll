class Node:
    def __init__(self, item):
        self.item = item
        self.prev = None
        self.next = None

class DLLIterator:
    def __init__(self, start):
        self.current = start

    def __iter__(self):
        return self

    def __next__(self):
        if not self.current:
            raise StopIteration
        data = self.current.item
        self.current = self.current.next
        return data

class DLL:
    def __init__(self):
        self.head = None

    def insert_at_start(self, item):
        new_node = Node(item)
        new_node.next = self.head
        if self.head:
            self.head.prev = new_node
        self.head = new_node

    def insert_at_last(self, item):
        if self.head is None:
            self.insert_at_start(item)
            return
        current = self.head
        while current.next:
            current = current.next
        new_node = Node(item)
        current.next = new_node
        new_node.prev = current

    def search(self, item):
        current = self.head
        while current:
            if current.item == item:
                return current
            current = current.next
        return None

    def insert_at_after(self, node, item):
        if node is None:
            return
        new_node = Node(item)
        new_node.next = node.next
        new_node.prev = node
        if node.next:
            node.next.prev = new_node
        node.next = new_node

    def __iter__(self):
        return DLLIterator(self.head)

# Test the implementation
mylist = DLL()
mylist.insert_at_start(10)
mylist.insert_at_last(20)
mylist.insert_at_after(mylist.search(10), 15)

for x in mylist:
    print(x, end=' ')
print()
